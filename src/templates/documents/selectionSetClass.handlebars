@JsonSerializable()
class {{ className }} {{

    classExtends
        baseType=typeName
        mixins=(resolveMixins allFields)
        fragments=fragmentsSpread
        interfaces=interfaces

}} {
  {{#if typeName }}
  static final String typeName = "{{ typeName }}";
  {{/if}}

  {{> selectionSet }}

  {{className}}( 
    {{#emptySafeEach allFields
      required='name'
      prefix='{'
      suffix='}'
    }}
      {{#if isRequired }}@required {{/if~}}
      {{ resolveType type
          isRequired
          (takeFirst contextName ../contextName)
          (takeFirst contextModels ../contextModels)
          isArray
          raw
          ../name
      }} {{dartName name}},
    {{/emptySafeEach}}
  ): {{#eachUniqueBy allFields uniqueField='schemaFieldName' prefix='super(' noDupeSuffix=');'}}
      {{dartName schemaFieldName}}: {{dartName name}},
    {{else}}) {
      {{#each this}}
        this.{{dartName name}} = {{dartName name}};
      {{/each}}
    }{{/eachUniqueBy}}{{!-- coupled to the same eachUniqueBy in selectionSet --}}

  {{className}}.empty();

  /// Creates a copy of this `{{ className }}`
  {{ className }} copy() => {{className}}.empty()..addAll(this);

  /// Copies fields from [other] into a new `{{ className }}`
  {{className}}.from({{ toPascalCase typeName }} other) {
    addAll(other);
  }

  @protected
  Set<String> get missingRequiredFields {
    Set<String> missingFields = Set();
    {{#each allFields}}
    {{~#if isRequired}}
    if ({{ camelCase (dartName name) }} == null){
      missingFields.add("
      {{~ camelCase (dartName name) ~}}
      {{~#if isAliased}} aliased from {{ dartName schemaFieldName }}
      {{~/if~}}
      ");
    }
    {{/if}}
    {{/each}}
    return missingFields;
  }

  factory {{className}}.fromJson(Map<String, dynamic> json) => 
    _${{className}}FromJson(json);

  Map<String, dynamic> toJson() => _${{className}}ToJson(this){{#if typeName }}
    ..['__typename'] = typeName{{/if}};

}
