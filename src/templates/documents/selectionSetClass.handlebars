@JsonSerializable()
class {{ className }} {{

    classExtends
        baseType=typeName
        mixins=(resolveMixins allFields)
        fragments=fragmentsSpread
        interfaces=interfaces

}} {
  {{#if typeName }}
  static final String schemaTypeName = "{{ typeName }}";
  {{/if}}

  {{#if @root.config.typenameField }}
  @protected
  String {{ dartName @root.config.typenameField }};
  {{/if}}

  {{> selectionSet }}

  {{className}}( 
    {{#emptySafeEach allFields
      required='name'
      prefix='{'
      suffix='}'
    }}
      {{#if isRequired }}@required {{/if~}}
      {{ resolveType type
          isRequired
          (takeFirst contextName ../contextName)
          (takeFirst contextModels ../contextModels)
          isArray
          raw
          ../name
      }} {{dartName name}},
    {{/emptySafeEach}}
  ): {{#eachUniqueBy allFields uniqueField='schemaFieldName' prefix='super(' noDupeSuffix=');'}}
      {{dartName schemaFieldName}}: {{dartName name}},
    {{else}}) {
      {{#each this}}
        this.{{dartName name}} = {{dartName name}};
      {{/each}}
    }
  {{/eachUniqueBy}}{{!-- coupled to the same eachUniqueBy in selectionSet --}}

  {{className}}.empty();

  /// Creates a copy of this `{{ className }}`
  {{ className }} copy() => {{className}}.empty()..addAll(this);

  /// Copies fields from [other] into a new `{{ className }}`
  {{className}}.from({{ toPascalCase typeName }} other) {
    addAll(other);
  }

  @protected
  Set<String> get missingRequiredFields {
    Set<String> missingFields = Set();
    {{#each allFields}}
    {{~#if isRequired}}
    if ({{ camelCase (dartName name) }} == null){
      missingFields.add("
      {{~ camelCase (dartName name) ~}}
      {{~#if isAliased}} aliased from {{ dartName schemaFieldName }}
      {{~/if~}}
      ");
    }
    {{/if}}
    {{/each}}
    return missingFields;
  }

  {{!--
  {{#if hasInlineFragments~}}
  /// Adds all fields from [other] to this `{{ className }}`.
  /// 
  /// pre-existing values are not overwritten unless `overwrite: true`
  @override
  void addAll(covariant {{ className }} other, { bool overwrite = true, }) {
    super.addAll(other, overwrite: overwrite);
    {{#each inlineFragments}}
    if(other.{{ inlineFragmentName name}} != null){
      {{inlineFragmentName name}}..addAll(other.{{ inlineFragmentName name}});
    }
    {{/each}}
  }
  {{~/if}}
  --}}
  /// Adds all fields from [other] to this `{{ className }}`.
  /// 
  /// pre-existing values are not overwritten unless `overwrite: true`
  @override
  void addAll(covariant {{ className }} other, { bool overwrite = true, }) {
    super.addAll(other, overwrite: overwrite);
    {{#eachUniqueBy allFields uniqueField='schemaFieldName'}}{{else}}
    if (overwrite != null && overwrite){
      {{#each this}}{{#if name}}
      {{ dartName name }} = other.{{ dartName name }} ?? {{ dartName name }};
      {{~/if}}{{/each}}
    } else {
      {{#each this}}{{#if name}}
      {{ dartName name }} ??= other.{{ dartName name }};
      {{~/if}}{{/each}}
    }
    {{/eachUniqueBy}}

    {{#each inlineFragments}}
    if(other.{{ inlineFragmentName name}} != null){
      {{#if isArray}}
      {{inlineFragmentName name}} = (overwrite ?? true)
        ? [...other.{{ inlineFragmentName name}}]
        : ({{inlineFragmentName name}} ?? [...other.{{ inlineFragmentName name}}]);
      {{else}}
      {{inlineFragmentName name}} ??= {{ concat ../contextName name }}.empty();
      {{inlineFragmentName name}}.addAll(other.{{ inlineFragmentName name}}, overwrite: overwrite);
      {{/if}}
    }
    {{/each}}

  }


  {{#if hasInlineFragments~}}
  {{#each inlineFragments}}
  @JsonKey(ignore: true)
  {{ concat ../contextName name }} {{ inlineFragmentName name}};
  {{/each}}
  {{~/if}}

  factory {{className}}.fromJson(Map<String, dynamic> json) {
    {{className}} instance = _${{className}}FromJson(json);
    {{#if @root.config.typenameField~}}
      final __typename = json['{{ @root.config.typenameField }}'];
      instance.{{ dartName @root.config.typenameField }} = __typename;

      {{#if hasInlineFragments~}}
      {{#each inlineFragments}}
      if({{ concat ../contextName name }}.schemaTypeName == __typename){
        instance.{{ inlineFragmentName name}} = {{ concat ../contextName name }}.fromJson(json);
      }
      {{/each}}
      {{~/if}}
    {{~/if}}
    return instance;
  }

  Map<String, dynamic> toJson() {
    Map<String, dynamic> json = _${{className}}ToJson(this);
    {{#if @root.config.typenameField~}}
    json['{{@root.config.typenameField }}'] = {{ dartName @root.config.typenameField }};
    {{~/if}}

    {{#if hasInlineFragments~}}
    {{#each inlineFragments}}
    if ({{ inlineFragmentName name}} != null){
        json.addAll({{ inlineFragmentName name}}.toJson());
    }
    {{/each}}
    {{~/if}}

    return json;
  }


}
