{{#if description }}{{ multilineComment description }}{{/if}}
class {{ className }} {
  {{#if typeName }}
  static final String typeName = "{{ typeName }}";
  {{/if}}

  static const possibleTypes = const {
    {{#each possibleTypes~}}
    {{this}}{{#unless @last}},
    {{/unless}}
    {{~/each}}
  };

  {{#each possibleTypes}}
  covariant {{ this }} {{inlineFragmentName this}};
  {{/each}}


  Object get value => (
    {{#each possibleTypes~}}
    {{inlineFragmentName this}}{{#unless @last}} ??
    {{/unless}}
    {{~/each}}
   );
  
  /// Adds all fields from [other] to this `{{ className }}`,
  /// validating that they are the same type
  /// 
  /// pre-existing values are not overwritten unless `overwrite: true`
  void addAll(covariant {{ className }} other, { bool overwrite = true, }) {
    assert(other?.value != null, "Cannot add all from null union value into $this from $other");
    final _v = value;
    {{#each possibleTypes~}}
    if (other.{{ inlineFragmentName this}} != null){
      assert(
        _v == null || {{ inlineFragmentName this}} != null,
        "Cannot add all from $other.value of type {{inlineFragmentName this}} into $this.value of type ${_v.runtimeType}",
      );
      {{ inlineFragmentName this}}.addAll(other.{{ inlineFragmentName this}}, overwrite: overwrite);
      return null;
    }
    {{/each}}
  }

}
