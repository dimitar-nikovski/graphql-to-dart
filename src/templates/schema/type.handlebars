{{#unless (
  ignoreType
    name
      @root.config.replaceTypes
      typeName
      @root.config.irreducibleTypes
)}}

{{ multilineComment description }}
@immutable
class {{ name }} {{
  classExtends
    baseType=(concat 'GraphQLObjectType<' name '>')
    interfaces=interfaces
    mixins=['EquatableMixin']
  }} {

  const {{ name }}.partial({
    {{#each fields}}{{#if name}}
      this.{{ dartName name }},
    {{/if}}{{/each}}
  });

  {{#each fields}}{{#if type}}{{#if name}}
  {{#if description }}{{ multilineComment description }}
  {{/if}}
  {{ resolveType type
      "final"
      (takeFirst contextName ../contextName)
      (takeFirst contextModels ../contextModels)
      isArray
      raw
      ../name
  }} {{ dartName name }};
  {{~/if}}{{/if}}{{/each}}

  @override
  List<Object> get props => [
    {{~#each fields}}{{#if name}}
    {{ dartName name }},
    {{/if}}{{/each~}}
  ];

  /// Creates a new [{{ name }}] with non-null values from [other] as attribute overrides
  {{ name }} mergedLeftWith(covariant {{ name }} other) {
    assert(other != null, "$this Cannot be merged with null");
    return {{ name }}(
      {{~#each fields}}{{#if name}}
      {{ dartName name }}: other.{{ dartName name }} ?? {{ dartName name }},
      {{/if}}{{/each~}}
    );
  }
    
  @protected
  Set<String> get missingRequiredFields {
    Set<String> missingFields = Set();
    {{#each fields}}
    {{~#if isRequired}}
    if (fields.{{ dartName name }} == null){
        missingFields.add("{{ dartName name }}");
    }
    {{/if}}
    {{/each}}
    return missingFields;
  }

  static final String schemaTypeName = "{{ takeFirst typeName name }}";
}

{{/unless}}
